<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- MyBatis代码生成器 @author Benson -->
    <!-- 需要修改的地方是①②③④，然后执行批处理即可 -->
    <!--导入属性配置 -->
    <properties resource="generator.properties"/>
    <!-- classPathEntry:数据库的JDBC驱动,①location换成你自己的mysql类库位置 -->
    <!--<classPathEntry
            location="${drive.class.path}" />-->

    <context id="mySQLTables" targetRuntime="MyBatis3" defaultModelType="flat">

        <!--
        当表名或者字段名为SQL关键字的时候，可以设置该属性为true，MBG会自动给表名或字段名添加**分隔符**
        -->
        <property name="autoDelimitKeywords" value="true"/>
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!--分页插件-->
        <plugin type="org.mybatis.generator.plugin.ext.PaginationPlugin" />
        <!--序列化插件-->
        <plugin type="org.mybatis.generator.plugin.ext.SerializablePlugin"/>
        <!--生成service插件-->
        <plugin type="org.mybatis.generator.plugin.ext.ServicePlugin">
            <property name="targetPackage" value="${service.package}" />
            <property name="implementationPackage" value="${service.impl.package}" />
            <property name="targetProject" value="${target.project}" />
            <property name="enableAnnotation" value="true"/>
            <property name="enableInsert" value="true" />
            <property name="enableInsertSelective" value="true" />
            <property name="enableDeleteByPrimaryKey" value="true" />
            <property name="enableDeleteByExample" value="true" />
            <property name="enableUpdateByPrimaryKeySelective" value="true" />
            <property name="enableUpdateByExampleSelective" value="true" />
            <property name="enableUpdateByPrimaryKey" value="true" />
            <property name="enableUpdateByExample" value="true" />
        </plugin>
        <!--生成批量插入方法的插件-->
        <plugin type="org.mybatis.generator.plugin.ext.BatchInsertPlugin"/>
        <!--生成批量更新方法的插件-->
        <plugin type="org.mybatis.generator.plugin.ext.BatchUpdatePlugin"/>
        <!-- 自动生成的注释配置
         配置文件中commentGenerator配置项最好不要设置为不生成注释，因为这样带来的问题是在自动生成的代码上不会存在@mbggenerated 这样的标记，
         这个标记是用来标注这些代码是代码生成器生成的，如果关闭了注释，我们在多次使用mybatis generator重新生成代码时会导致在已有生成的文件上追加生成重复的内容，
         导致代码错误，如果只生成一次代码，以后再不用工具生成可以关闭注释，如果会重复生成就要把注释开关打开。以下配置参数是关闭时间注释
         -->
        <commentGenerator>
            <!-- 去除自动生成的注释，设置为false表示要生成注释 -->
            <!--<property name="suppressAllComments" value="false" />-->
            <!--关闭生成时间注释-->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!-- ②数据库连接信息-->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
            <!--
                默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL 和
                NUMERIC 类型解析为java.math.BigDecimal
            -->
        </javaTypeResolver>

        <!-- targetProject:③修改自动生成代码的位置，包括DAO/entity/XML，一般生成在项目下面的src或者test -->
        <!-- 生成的model 包路径 -->
        <javaModelGenerator targetPackage="${model.package}"
                            targetProject="${target.project}">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
            <!--
                targetProject 生成的Java Bean放置在哪个项目的哪个目录下 targetPackage 生成的Java Bean的包名
                一个有用的属性 <property name="trimStrings" value="true" /> 从数据库返回的值被清理前后的空格
                <property name="enableSubPackages" value="false" /> 是否在包名后加上scheme名称
                <property name="trimStrings" value="false" />是否对字符串对象进行整理
            -->
        </javaModelGenerator>

        <!--生成xml mapper文件 路径 -->
        <sqlMapGenerator targetPackage="${xml.mapper.package}"
                         targetProject="${target.project}">
            <property name="enableSubPackages" value="true" />
            <!--
               targetProject 生成的 SqlMap.xml 文件放置在哪个项目的哪个目录下 targetPackage 生成的
               SqlMap.xml 文件的包名 <property name="enableSubPackages" value="false" />
               是否在包名后加上scheme名称
               -->
        </sqlMapGenerator>

        <!-- 配置生成的Dao接口的包路径
                生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="${dao.package}"
                             targetProject="${target.project}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

         <!--tableName:④用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 -->
         <!--<columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />//无论字段是什么类型，生成的类属性都是varchar。  -->
         <!--用的通配符匹配全部的表 -->
        <!--<table tableName="%"-->
        <table tableName="loan_interest_rate" domainObjectName="LoanInterestRate"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">

            <!--  配置自动返回主键 -->
            <!--<generatedKey column="id" sqlStatement="MySql" identity="true"/>-->
        </table>
        <!--<table tableName="wechat_menu" domainObjectName="WechatMenu"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">

            &lt;!&ndash;  配置自动返回主键 &ndash;&gt;
            &lt;!&ndash;<generatedKey column="id" sqlStatement="MySql" identity="true"/>&ndash;&gt;
        </table>
        <table tableName="wechat_req_msg_log" domainObjectName="WechatReqMsgLog"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">

            &lt;!&ndash;无论字段是什么类型，生成的类属性都是varchar。&ndash;&gt;
            <columnOverride column="req_xml" jdbcType="VARCHAR" />
            <columnOverride column="resp_xml" jdbcType="VARCHAR" />
            &lt;!&ndash;  配置自动返回主键 &ndash;&gt;
            &lt;!&ndash;<generatedKey column="id" sqlStatement="MySql" identity="true"/>&ndash;&gt;
        </table>
        <table tableName="wechat_public_account" domainObjectName="WechatPublicAccount"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">

            &lt;!&ndash;  配置自动返回主键 &ndash;&gt;
            &lt;!&ndash;<generatedKey column="id" sqlStatement="MySql" identity="true"/>&ndash;&gt;
        </table>-->
    </context>

</generatorConfiguration>